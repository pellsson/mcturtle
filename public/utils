function tokenize(inp, delimiter)
	local t = {}
	local i = 1
	if delimiter == nil then
		return t
	end
	local match = "([^" .. delimiter .. "]+)"
	for str in string.gmatch(inp, match) do
		t[i] = str
		i = i + 1
	end
	return t
end

function ternary(cond, a, b)
	if cond then
		return a
	end
	return b
end

function current_ticks()
	return (os.time() * 1000 + 18000) % 24000
end

function set_task(t)
	local fp = fs.open('.task', 'w')

	if fp then
		fp.writeLine(tostring(t))
		fp.close()
	end
	return (nil ~= fp)
end

function get_task()
	local fp = fs.open('.task', 'r')
	local p = 'none'
	if fp then
		 local line = fp.readLine()
		 if line and #line then
		 	p = line
		 end
		 fp.close()
	end
	return p
end

function get_task_array()
	return tokenize(get_task(), ' ')
end

function get_task_name()
	return get_task_array()[1]
end

function log(s)
	local fp = fs.open("log.out", "a")

	if fp then
		fp.writeLine(s)
		fp.close()
	end

	print(s)
end

function fatal(s)
	print("Fatal! " .. s)
	while true do
		os.sleep(100)
	end
end

function has_free_slot()
	for i=1, 16 do
		if 0 == turtle.getItemCount(i) then
			return true
		end
	end
	return false
end

function slot_fuel_value(slot)
	local data = turtle.getItemDetail(slot)
	if not data then
		return 0
	end
	if data.name == 'minecraft:coal' then
		return 80 * turtle.getItemCount(slot)
	elseif data.name == 'IC2:item.itemScrap' then
		return 15 * turtle.getItemCount(slot)
	elseif data.name == 'Railcraft:fuel.coke' then
		return 320 * turtle.getItemCount(slot)
	elseif data.name == 'minecraft:stick' then
		return 5 * turtle.getItemCount(slot)
	end
	return 0
end

function select_by_name(name)
	for i=1, 16 do
		data = turtle.getItemDetail(i)
		if data then
			if data.name == name then
				turtle.select(i)
				return true
			end
		end
	end
	return false
end

function is_slot_name(slot, name)
	local data = turtle.getItemDetail(slot)
	if data then
		return (data.name == name)
	end
	return false
end

function unload_type(name, dirstr)
	if not dirstr then
		dirstr = ''
	end

	for i=1, 16 do
		if is_slot_name(i, name) then
			turtle.select(i)
			turtle['drop' .. dirstr]()
		end
	end
end

function unload_all(dirstr)
	if not dirstr then
		dirstr = ''
	end

	for i=1, 16 do
		if turtle.getItemCount(i) ~= 0 then
			turtle.select(i)
			turtle['drop' .. dirstr]()
		end
	end
end

function stacks_of(name)
	local count = 0
	for i=1, 16 do
		if is_slot_name(i, name) then
			count = count + 1
		end
	end
	return count
end

function biggest_stack_of(name)
	local slot = 0
	local count = 0

	for i=1, 16 do
		if is_slot_name(i, name) then
			if turtle.getItemCount(i) > count then
				count = turtle.getItemCount(i)
				slot = i
			end
		end
	end

	return slot
end

function smart_unload_exclude(excluded, min_fuel, dirstr)
	if not excluded then
		excluded = {}
	end

	if not dirstr then
		dirstr = ''
	end

	if not min_fuel then
		print("not set?")
		min_fuel = 80 * (64 * 2) -- Two stacks of coal by default
	end

	local fuel = {}

	for i=1, 16 do
		local fv = slot_fuel_value(i)
		if 0 ~= fv then
			table.insert(fuel, { fuelvalue = fv, slot = i })
		end
	end

	table.sort(fuel, function(a, b) return a.fuelvalue > b.fuelvalue end)

	local total_fuel = 0

	for i=1, #fuel do
		if total_fuel < min_fuel then
			table.insert(excluded, fuel[i].slot)
			total_fuel = total_fuel + fuel[i].fuelvalue
		end
	end

	for i=1, 16 do
		local drop = true

		for e=1, #excluded do
			if i == excluded[e] then
				drop = false
				break
			end
		end

		if drop then
			turtle.select(i)
			turtle['drop' .. dirstr]()
		end
	end

	return true
end

function smart_unload(min_fuel, dirstr)
	return smart_unload_exclude({}, min_fuel, dirstr)
end



